Chapter1
#5.1 Tour of CRA

MODULE.CSS
- CRA의 고유 기능으로, className을 활용하여
  전역이 아닌 컴포넌트에 한정해서 스타일을 정해줄 수 있다.
  내 HTML내에서는 랜덤방식으로 class name 이 설정된다.
  따라서 동일한 클래스 이름을 사용하더라도 상관없다.


Chapter2
#6.1 useEffect

useEffect
- 두 개의 argument를 가지는 함수
- 첫 번째 argument는 실행하고 싶은 코드
ex) useEffect(callback, []) // 첫 렌더링때만 실행(즉, 한번만 실행)
    useEffect(() => {
      console.log("I run only once");
    }, []);
    useEffect(() => {
      console.log("I ruen when 'keyword' changes.");
    }, [keyword]);
    useEffect(() => {
      console.log("I run when 'counter' changes.");
    }, [counter]);
    useEffect(() => {
      console.log("I run when keyword & counter change");
    }, [keyword, counter]);

리렌더링이 필요없을 때
  리렌더링 되어도 괜찮은 코드도 있지만,
  컴포넌트가 처음 render 될 때만 렌더링이 필요한 코드도 있다.
  ex) API로 외부 데이터를 가져올 때 컴포넌트 처음 렌더링되는 그 순간에만
      API 요청을 하고 이후에 state가 변화할 때는 그 API에서 똑같은 정보를
      가져올 필요가 없다.

Chapter3
#7.0 ToDo List Part 1

  - 현재 배열에 값을 추가 하고 싶다면 JS의 경우는 array.push() 로 값을 추가 했겠지만
    React의 경우는 절대 State를 직접적으로 수정하지 않기 때문에 항상 수정하는 함수를
    사용해야 한다.

#7.1 ToDo List Part 2
  map 함수
  - array.map()
  - ex) array.map(() => ":)")
  - 하나의 array에 있는 item을 내가 원하는 무엇이든지로 바꿔서
    새로운 array로 return 한다.
  - map함수는 첫번째 argument로 현재의 item을 가져올 수 있다.
    ex) array.map((item) => ":)")
  - 포인트는 map함수의 첫번째 argument가 진행되고 있는 순서에 맞는 item이라는 것이다.
    ex) array.map((item) => item.toUpperCase())
  - 예전 array를 가져와서 변형하는 것이고 return하는 어떤 값이던지 그 값이 새로운 array가 된다.


#7.4 Movie App part Two
  key : React.js 에서만, map안에서 component들을 render할 때 사용하는 것.
  React Router : 페이지를 전환하는 것이다.
  실습환경고정 : npm i react-router-dom@5.3.0